{"ast":null,"code":"// Super fast physics simulations for JavaScript\n// Copyright 2014 Ralph Thomas\n// Licensed under the Apache License, Version 2.0\n// https://github.com/iamralpht/gravitas.js\n// Adapted to TypeScript and customized by Tanner Linsley (@tannerlinsley)\nvar epsilon = 0.001;\nfunction almostEqual(a, b) {\n  if (Number.isNaN(a) && Number.isNaN(b)) {\n    return true;\n  }\n  return a > b - epsilon && a < b + epsilon;\n}\nfunction almostZero(a) {\n  return almostEqual(a, 0);\n}\nexport var Spring = /*#__PURE__*/function () {\n  function Spring(init, mass, springConstant, damping) {\n    this._m = mass;\n    this._k = springConstant;\n    this._c = damping;\n    this._solution = null;\n    this.endPosition = init;\n    this._startTime = 0;\n  }\n  var _proto = Spring.prototype;\n  _proto.x = function x(dt) {\n    if (dt === undefined) {\n      dt = (new Date().getTime() - this._startTime) / 1000.0;\n    }\n    return this._solution ? this.endPosition + this._solution.x(dt) : this.endPosition;\n  };\n  _proto.dx = function dx(dt) {\n    if (dt === undefined) {\n      dt = (new Date().getTime() - this._startTime) / 1000.0;\n    }\n    return this._solution ? this._solution.dx(dt) : 0;\n  };\n  _proto.setEnd = function setEnd(x) {\n    var t = new Date().getTime();\n    var velocity = 0;\n    var position = this.endPosition;\n    if (this._solution) {\n      // Don't whack incoming velocity.\n      if (almostZero(velocity)) velocity = this._solution.dx((t - this._startTime) / 1000.0);\n      position = this._solution.x((t - this._startTime) / 1000.0);\n      if (almostZero(velocity)) velocity = 0;\n      if (almostZero(position)) position = 0;\n      position += this.endPosition;\n    }\n    if (this._solution && almostZero(position - x) && almostZero(velocity)) {\n      return;\n    }\n    this.endPosition = x;\n    this._solution = this._solve(position - this.endPosition, velocity);\n    this._startTime = t;\n  };\n  _proto.snap = function snap(x) {\n    this._startTime = new Date().getTime();\n    this.endPosition = x;\n    this._solution = {\n      x: function x() {\n        return 0;\n      },\n      dx: function dx() {\n        return 0;\n      }\n    };\n  };\n  _proto.done = function done() {\n    return almostEqual(this.x(), this.endPosition) && almostZero(this.dx());\n  } // reconfigure(mass: number, springConstant: number, damping: number) {\n  //   this._m = mass\n  //   this._k = springConstant\n  //   this._c = damping\n  //   if (this.done()) {\n  //     return\n  //   }\n  //   this._solution = this._solve(this.x() - this.endPosition, this.dx())\n  //   this._startTime = new Date().getTime()\n  // }\n  // springConstant() {\n  //   return this._k\n  // }\n  // damping() {\n  //   return this._c\n  // }\n  ;\n  _proto._solve = function _solve(initial, velocity) {\n    var c = this._c;\n    var m = this._m;\n    var k = this._k; // Solve the quadratic equation; root = (-c +/- sqrt(c^2 - 4mk)) / 2m.\n\n    var cmk = c * c - 4 * m * k;\n    if (cmk === 0) {\n      // The spring is critically damped.\n      // x = (c1 + c2*t) * e ^(-c/2m)*t\n      var r = -c / (2 * m);\n      var c1 = initial;\n      var c2 = velocity / (r * initial);\n      return {\n        x: function x(t) {\n          return (c1 + c2 * t) * Math.pow(Math.E, r * t);\n        },\n        dx: function dx(t) {\n          var pow = Math.pow(Math.E, r * t);\n          return r * (c1 + c2 * t) * pow + c2 * pow;\n        }\n      };\n    } else if (cmk > 0) {\n      // The spring is overdamped; no bounces.\n      // x = c1*e^(r1*t) + c2*e^(r2t)\n      // Need to find r1 and r2, the roots, then solve c1 and c2.\n      var r1 = (-c - Math.sqrt(cmk)) / (2 * m);\n      var r2 = (-c + Math.sqrt(cmk)) / (2 * m);\n      var _c = (velocity - r1 * initial) / (r2 - r1);\n      var _c2 = initial - _c;\n      return {\n        x: function x(t) {\n          return _c2 * Math.pow(Math.E, r1 * t) + _c * Math.pow(Math.E, r2 * t);\n        },\n        dx: function dx(t) {\n          return _c2 * r1 * Math.pow(Math.E, r1 * t) + _c * r2 * Math.pow(Math.E, r2 * t);\n        }\n      };\n    } else {\n      // The spring is underdamped, it has imaginary roots.\n      // r = -(c / 2*m) +- w*i\n      // w = sqrt(4mk - c^2) / 2m\n      // x = (e^-(c/2m)t) * (c1 * cos(wt) + c2 * sin(wt))\n      var w = Math.sqrt(4 * m * k - c * c) / (2 * m);\n      var _r = -(c / 2 * m);\n      var _c3 = initial;\n      var _c4 = (velocity - _r * initial) / w;\n      return {\n        x: function x(t) {\n          return Math.pow(Math.E, _r * t) * (_c3 * Math.cos(w * t) + _c4 * Math.sin(w * t));\n        },\n        dx: function dx(t) {\n          var power = Math.pow(Math.E, _r * t);\n          var cos = Math.cos(w * t);\n          var sin = Math.sin(w * t);\n          return power * (_c4 * w * cos - _c3 * w * sin) + _r * power * (_c4 * sin + _c3 * cos);\n        }\n      };\n    }\n  };\n  return Spring;\n}();","map":{"version":3,"names":["epsilon","almostEqual","a","b","Number","isNaN","almostZero","Spring","init","mass","springConstant","damping","_m","_k","_c","_solution","endPosition","_startTime","_proto","prototype","x","dt","undefined","Date","getTime","dx","setEnd","t","velocity","position","_solve","snap","done","initial","c","m","k","cmk","r","c1","c2","Math","pow","E","r1","sqrt","r2","_c2","w","_r","_c3","_c4","cos","sin","power"],"sources":["/Users/lebon/Desktop/el_balon/node_modules/react-charts/es/utils/spring.js"],"sourcesContent":["// Super fast physics simulations for JavaScript\n// Copyright 2014 Ralph Thomas\n// Licensed under the Apache License, Version 2.0\n// https://github.com/iamralpht/gravitas.js\n// Adapted to TypeScript and customized by Tanner Linsley (@tannerlinsley)\nvar epsilon = 0.001;\n\nfunction almostEqual(a, b) {\n  if (Number.isNaN(a) && Number.isNaN(b)) {\n    return true;\n  }\n\n  return a > b - epsilon && a < b + epsilon;\n}\n\nfunction almostZero(a) {\n  return almostEqual(a, 0);\n}\n\nexport var Spring = /*#__PURE__*/function () {\n  function Spring(init, mass, springConstant, damping) {\n    this._m = mass;\n    this._k = springConstant;\n    this._c = damping;\n    this._solution = null;\n    this.endPosition = init;\n    this._startTime = 0;\n  }\n\n  var _proto = Spring.prototype;\n\n  _proto.x = function x(dt) {\n    if (dt === undefined) {\n      dt = (new Date().getTime() - this._startTime) / 1000.0;\n    }\n\n    return this._solution ? this.endPosition + this._solution.x(dt) : this.endPosition;\n  };\n\n  _proto.dx = function dx(dt) {\n    if (dt === undefined) {\n      dt = (new Date().getTime() - this._startTime) / 1000.0;\n    }\n\n    return this._solution ? this._solution.dx(dt) : 0;\n  };\n\n  _proto.setEnd = function setEnd(x) {\n    var t = new Date().getTime();\n    var velocity = 0;\n    var position = this.endPosition;\n\n    if (this._solution) {\n      // Don't whack incoming velocity.\n      if (almostZero(velocity)) velocity = this._solution.dx((t - this._startTime) / 1000.0);\n      position = this._solution.x((t - this._startTime) / 1000.0);\n      if (almostZero(velocity)) velocity = 0;\n      if (almostZero(position)) position = 0;\n      position += this.endPosition;\n    }\n\n    if (this._solution && almostZero(position - x) && almostZero(velocity)) {\n      return;\n    }\n\n    this.endPosition = x;\n    this._solution = this._solve(position - this.endPosition, velocity);\n    this._startTime = t;\n  };\n\n  _proto.snap = function snap(x) {\n    this._startTime = new Date().getTime();\n    this.endPosition = x;\n    this._solution = {\n      x: function x() {\n        return 0;\n      },\n      dx: function dx() {\n        return 0;\n      }\n    };\n  };\n\n  _proto.done = function done() {\n    return almostEqual(this.x(), this.endPosition) && almostZero(this.dx());\n  } // reconfigure(mass: number, springConstant: number, damping: number) {\n  //   this._m = mass\n  //   this._k = springConstant\n  //   this._c = damping\n  //   if (this.done()) {\n  //     return\n  //   }\n  //   this._solution = this._solve(this.x() - this.endPosition, this.dx())\n  //   this._startTime = new Date().getTime()\n  // }\n  // springConstant() {\n  //   return this._k\n  // }\n  // damping() {\n  //   return this._c\n  // }\n  ;\n\n  _proto._solve = function _solve(initial, velocity) {\n    var c = this._c;\n    var m = this._m;\n    var k = this._k; // Solve the quadratic equation; root = (-c +/- sqrt(c^2 - 4mk)) / 2m.\n\n    var cmk = c * c - 4 * m * k;\n\n    if (cmk === 0) {\n      // The spring is critically damped.\n      // x = (c1 + c2*t) * e ^(-c/2m)*t\n      var r = -c / (2 * m);\n      var c1 = initial;\n      var c2 = velocity / (r * initial);\n      return {\n        x: function x(t) {\n          return (c1 + c2 * t) * Math.pow(Math.E, r * t);\n        },\n        dx: function dx(t) {\n          var pow = Math.pow(Math.E, r * t);\n          return r * (c1 + c2 * t) * pow + c2 * pow;\n        }\n      };\n    } else if (cmk > 0) {\n      // The spring is overdamped; no bounces.\n      // x = c1*e^(r1*t) + c2*e^(r2t)\n      // Need to find r1 and r2, the roots, then solve c1 and c2.\n      var r1 = (-c - Math.sqrt(cmk)) / (2 * m);\n      var r2 = (-c + Math.sqrt(cmk)) / (2 * m);\n\n      var _c = (velocity - r1 * initial) / (r2 - r1);\n\n      var _c2 = initial - _c;\n\n      return {\n        x: function x(t) {\n          return _c2 * Math.pow(Math.E, r1 * t) + _c * Math.pow(Math.E, r2 * t);\n        },\n        dx: function dx(t) {\n          return _c2 * r1 * Math.pow(Math.E, r1 * t) + _c * r2 * Math.pow(Math.E, r2 * t);\n        }\n      };\n    } else {\n      // The spring is underdamped, it has imaginary roots.\n      // r = -(c / 2*m) +- w*i\n      // w = sqrt(4mk - c^2) / 2m\n      // x = (e^-(c/2m)t) * (c1 * cos(wt) + c2 * sin(wt))\n      var w = Math.sqrt(4 * m * k - c * c) / (2 * m);\n\n      var _r = -(c / 2 * m);\n\n      var _c3 = initial;\n\n      var _c4 = (velocity - _r * initial) / w;\n\n      return {\n        x: function x(t) {\n          return Math.pow(Math.E, _r * t) * (_c3 * Math.cos(w * t) + _c4 * Math.sin(w * t));\n        },\n        dx: function dx(t) {\n          var power = Math.pow(Math.E, _r * t);\n          var cos = Math.cos(w * t);\n          var sin = Math.sin(w * t);\n          return power * (_c4 * w * cos - _c3 * w * sin) + _r * power * (_c4 * sin + _c3 * cos);\n        }\n      };\n    }\n  };\n\n  return Spring;\n}();"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}